Library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity clock_divider is
port(	clock_100,reset: in std_logic;
		clock_400		: out std_logic
		);
end entity;

architecture rtl of clocker is 
----initiating the required parameters to divide the 50Mhz clock----
signal baud_tick	: integer range 0 to 5208:=0;
signal baud_tick16: integer range 0 to 326 :=0;
signal baudtest	:std_logic;
signal baudtest16	:std_logic;
signal clock_400test:std_logic;
signal One100test	:std_logic;

----------400 HZ CLOCK signals----------
signal clock_400_ticker: integer range 0 to 125000:=0;

begin

	process(CLOCK_50,reset) is
	begin
		--if (reset='0') then 
		--	baud_tick<=0;
		--	baud_tick16<=0;
		--	One100kHz_tick<=0;
		--	clock_400_ticker<=0;
		--	baudtest<='0';
		--	baudtest16<='0';
		--	clock_400test<='0';
		--	One100test<='0';
		if rising_edge(CLOCK_50) then
		
		if (baud_tick16>= 163) then
				baudtest16<=NOT(baudtest16);
				baud_tick16<=0;
		else baud_tick16<=baud_tick16+1;
		end if;
		
		if(baud_tick>=2604) then 
				baudtest<=NOT(baudtest);
				baud_tick<=0;
		else baud_tick<=baud_tick+1;
		end if;
		
		if (clock_400_ticker>=62500) then
				clock_400test	<= NOT(clock_400test);
				clock_400_ticker<=0;
		else clock_400_ticker<=clock_400_ticker+1;
		end if;
		
		if (One100kHz_tick>= 250) then
				One100test<=NOT(One100test);
				One100kHz_tick<=0;
		else one100kHz_tick<=One100kHz_tick+1;
		end if;
	end if;

end process;
bclk<=baudtest;
bclk16<=baudtest16;
clock_400<=clock_400test;
One100<=One100test;
end architecture rtl;		